# -*- coding: utf-8 -*-

from contextlib import contextmanager

import System
from System.Runtime.InteropServices import Marshal



@contextmanager
def autorelease(comobj):
  """COM auto release contextmanager"""
  try:
    yield comobj
  finally:
    Marshal.ReleaseComObject(comobj)



class AutoReleasingComObject(object):
    '''
    Wraps a given ComObject and allows to auto-release all ComObject-instances
    created by accessing attributes/methods of the ComObject.
    
    The AutoReleasingComObject-instance can be used as context-manager, which
    will release all generated ComObjects on exiting the with-context.
    By default, the wrapped ComObject in this AutoReleasingComObject-instance is also released.
    This is configurable by the release_self-parameter.
    '''
    
    def __init__(self, comobj, release_self=True):
        ''' Constructor '''
        if not type(comobj).__name__ == '__ComObject':
            # FIXME: raise ERROR
            raise AttributeError("AutoReleasingComObject expects to wrap a ComObject.")
            pass
        self._comobj = comobj
        self._release_self = release_self
        self._accessed_com_attributes = []
    
    
    def __getattr__(self, attr):
        '''
        Provides access to attributes and methods of the ComObject
        If attr is a ComObject, an AutoReleasingComObject-instance will be returned.
        If attr is another value, this value is returned.
        If attr is a method, a wrapper-method will be returned, which will create an AutoReleasingComObject-instance (or return a non-Com-value) after the method-call
        
        The ComObjects which are generated by attribute/method-access are stored.
        All these ComObjects can be released be calling dispose.
        Dispose will go down the AutoReleasingComObject-tree to automatically release all ComObjects accessed in this ComObject-tree.
        '''
        value = getattr(self._comobj, attr)
        
        if type(value).__name__ != 'DispCallable':
            # attribute did not return a function
            # create auto-release-object or directly return the value
            return self.create_and_register_auto_release_com_object(value)
            
        else:
            # attribute is actually a function
            # return wrapper to call method and create auto-release-object afterwards 
            
            method_of_comobj = value
            def wrapped_disp_callable(*args, **kwargs):
                return_value = method_of_comobj(*args, **kwargs)
                return self.create_and_register_auto_release_com_object(return_value)
                
            return wrapped_disp_callable
    
    
    def create_and_register_auto_release_com_object(self, com_obj):
        '''
        creates an AutoReleasingComObject-instance if com_obj is a ComObject,
        or returns the given value
        '''
        if type(com_obj).__name__ == '__ComObject':
            auto_release_com_obj = AutoReleasingComObject(com_obj, release_self=True)
            self._accessed_com_attributes.append(auto_release_com_obj)
            return auto_release_com_obj
        else:
            # value is no ComObject
            return com_obj
        
    
    def dispose(self):
        '''
        Releases all ComObjects which were generated during the lifetime of the AutoReleasingComObject-instance.
        
        ComObjects are generated by accessing attributes or methods and are stored internally.
        The attribute/method-access (see __getattr__) wraps these ComObjects in AutoReleasingComObject-instances.
        This allows to store ComObjects which are generated further down the ComObjects-tree.
        
        Dispose will go down this AutoReleasingComObject-tree and calls dispose on these instances as well.
        Therefore, all ComObjects accessed in the object-tree are released by a single dispose-call.
        '''
        # release ComObjects generated further down the object-tree
        for auto_release_com_obj in self._accessed_com_attributes:
            auto_release_com_obj.dispose()
        
        # release wrapped ComObject
        if self._release_self:
            Marshal.ReleaseComObject(self._comobj)
    
    
    def __enter__(self):
        '''
        Allow usage as context-manager (with-statement).
        '''
        return self
    
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        '''
        Allow usage as context-manager (with-statement).
        After exiting, all accessed ComObjects are released.
        By default, the wrapped ComObject in this AutoReleasingComObject-instance is also released.
        This is configurable by the release_self-parameter.
        '''
        self.dispose()
    
    
